// <auto-generated />
using System;
using BibliotecaVirtual.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BibliotecaVirtual.Migrations
{
    [DbContext(typeof(ContextoData))]
    partial class ContextoDataModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BibliotecaVirtual.Models.Autor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SegundoNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Autores");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SegundoNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.ClienteLivro", b =>
                {
                    b.Property<int>("LivroId")
                        .HasColumnType("integer");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.HasKey("LivroId", "ClienteId");

                    b.HasIndex("ClienteId");

                    b.ToTable("ClienteLivros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Funcionarios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PrimeiroNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SegundoNome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Livros", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LancamentoDoLivro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AutorId");

                    b.ToTable("Livros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.ClienteLivro", b =>
                {
                    b.HasOne("BibliotecaVirtual.Models.Cliente", "Clientes")
                        .WithMany("ClienteLivros")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BibliotecaVirtual.Models.Livros", "Livros")
                        .WithMany("ClienteLivros")
                        .HasForeignKey("LivroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clientes");

                    b.Navigation("Livros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Livros", b =>
                {
                    b.HasOne("BibliotecaVirtual.Models.Autor", null)
                        .WithMany("Livros")
                        .HasForeignKey("AutorId");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Autor", b =>
                {
                    b.Navigation("Livros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Cliente", b =>
                {
                    b.Navigation("ClienteLivros");
                });

            modelBuilder.Entity("BibliotecaVirtual.Models.Livros", b =>
                {
                    b.Navigation("ClienteLivros");
                });
#pragma warning restore 612, 618
        }
    }
}
